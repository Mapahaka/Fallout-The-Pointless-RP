#ifndef VOMIT
#define VOMIT

#include "_ltp.fos"
#include "_utils.fos"
//#include "firestarter_h.fos"
//#include "effects_h.fos"
//#include "explode_h.fos"
//#include "combat_h.fos"
//#include "special_weapons_h.fos"

bool vomit_ltp_inited = false;
void vomit_ltp_init()
{
    LTPREG( LTP_VOMIT, process_vomit )
    vomit_ltp_inited = true;
}

void unsafe_vomit( Critter& cr, int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	if( !valid( cr ) || cr.IsBusy() || cr.IsDead() )
	{
		return;
	}
	
	Map@ map = cr.GetMap();
	if( !valid(map) )
	{
		return;
	}	
	
	uint16 mapPid = map.GetProtoId();
	
		
	if( cr.ParamBase[ ST_THIRST ] < 400 || cr.ParamBase[ ST_HUNGER ] < 400 )
	{		
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EMOTE_CANTVOMIT );	
		return;
	}
	
	if( cr.IsKnockout() || cr.Stat[ ST_CURRENT_HP ] <= 0 )
	{
		return;
	}	
	if( !vomit_ltp_inited )
	{
		vomit_ltp_init();
	}
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_TRY2VOMIT );
	cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] = 2500;
	cr.ParamBase[ ST_LTP_SEQUENCE ] = 1;
	StartProcess( cr, LTP_VOMIT, 0, 0, 0, cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ] );
	return;
}
	
uint process_vomit( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_VOMIT )
	
	Map@ map = cr.GetMap();
	if( !valid(map) )
	{
		return 0;
	}
		
    if( param0 == 0 )
	{
		param0 ++;
		return cr.ParamBase[ ST_LTP_SEQUENCE_WAIT ];
	}
	else
    {	
		_CritAnimatePickup( cr );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_VOMITS );
		PlayGenericSound( map, cr.HexX, cr.HexY, "puke.ogg", 10 );
		uint16 hx = cr.HexX, hy = cr.HexY;
		map.MoveHexByDir( hx, hy, cr.Dir, 1 );
		map.AddItem( hx, hy, PID_SHIT_SMALL, 1 );
		cr.ParamBase[ ST_THIRST ] -= 450;
		cr.ParamBase[ ST_HUNGER ] -= 305;			
		//ToDO Если разделить пищевое отравление и отревление от укусов - можно добавить снятие пищевого отравления при выташнивании содержимого желудка.	
	}
	return 0;
}


#endif // vomit