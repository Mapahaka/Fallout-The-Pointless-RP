#ifndef SMOKING
#define SMOKING

#include "_utils.fos"
#include "smoking_h.fos"
#include "poison_h.fos"
#include "heal_h.fos"

bool CheckSmokers( Critter& cr, Item& item )
{
	uint16 Pid = item.GetProtoId();
	switch( Pid )
	{
		case( PID_CIGARETTES ):
		case( PID_CIGARETTES_PRT ):
			TakeCigarettes( cr, item );
			break;
		case( PID_TOBACCO ):	
		case( PID_FIVELEAF_BAG ):
			ChargePipe( cr, item );
			break;
		default:
			TrySmoking( cr, item );
			break;
	}
	return true;
}

void TakeCigarettes( Critter& cr, Item& pack )
{
	uint16 Pid = pack.GetProtoId();
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		PlayGenericSound( map, cr.HexX, cr.HexY, "arm_fishing_rod.ogg", 5 );
	}
	
	if( Pid == PID_CIGARETTES )
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_OPEN_CIGS );
		_SubItem( pack, 1 );
		cr.AddItem( PID_CIGARETTES_PRT, 1 );
	}
	else if( Pid == PID_CIGARETTES_PRT && pack.REMAINING_USES < 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_CIGS_LEFT );
		_SubItem( pack, 1 );
	}
	else
	{
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_TAKES_CIG );
		cr.AddItem( PID_CIGARETTE, 1 );
		pack.REMAINING_USES--;
		pack.Update();
	}
}

void TrySmoking( Critter& cr, Item& item )
{
	uint16 PidT = item.GetProtoId();
	
	if ( !hasItems( cr, heatSources ) ) 
	{
		if ( PidT == PID_CIGARETTE_IGN || PidT == PID_PREWAR_CIGAR1_PRT || PidT == PID_PREWAR_CIGAR2_PRT )
		{		
		}
		else if ( !hasItems( cr, heatSources ) )
		{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_FIRE_TO_SMOKE );
		return;
		}
	}
	
	if( hasItems( cr, SmokeStopers, SLOT_HEAD ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REMOVE_GAS_MASK );
		return;
	}
	
	if( item.CritSlot != SLOT_HAND1 && item.CritSlot != SLOT_HEAD )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_OBJECT );
		return;
	}
	
	Map @ map = cr.GetMap();
	
	
	if( PidT == PID_CIGARETTE_IGN || PidT == PID_PREWAR_CIGAR1_PRT || PidT == PID_PREWAR_CIGAR2_PRT )
	{
	
	PlayGenericSound( map, cr.HexX, cr.HexY, cr.Stat[ ST_GENDER ] == GENDER_MALE ? "smoking_01.ogg" : "Fem_Smoking_01.ogg", 6 );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_SMOKN );
	cr.Animate ( 0, 20, null, true, false );
	map.SetTextMsg( cr.HexX, cr.HexY, COLOR_ENV, TEXTMSG_TEXT, STR_CIG_SMOKE );	
	}
	else
	{
		PlayGenericSound( map, cr.HexX, cr.HexY, cr.Stat[ ST_GENDER ] == GENDER_MALE ? "smoking.ogg" : "Fem_Smoking.ogg", 6 );
		cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_SMOKE );
		cr.Animate ( 0, 20, null, true, false );
		map.SetTextMsg( cr.HexX, cr.HexY, COLOR_ENV, TEXTMSG_TEXT, STR_CIG_SMOKE );
	}
	
	uint16 Pid = item.GetProtoId();
	if( Pid == PID_KOSYAK )
	{
		SayLog( cr, crInfo( cr ) + " is smoking a joint." );
		SmokeJoint( cr, item );
	}
	else if( Pid == PID_CIGARETTE || Pid == PID_CIGARETTE_IGN )
	{
		SayLog( cr, crInfo( cr ) + " is smoking a cigarette." );
//		_SubItem( item, 1 );
//		TobaccoEffect( cr );
		SmokeCig( cr, item );
	}
	else if( SmokingPipes.find( Pid ) != -1 )
	{
		SayLog( cr, crInfo( cr ) + " is smoking a pipe." );
		SmokePipe( cr, item );
	}

	else
	{
		SayLog( cr, crInfo( cr ) + " is smoking cigar." );
		SmokeCigar( cr, item );		
	}
}

void SmokeJoint( Critter& cr, Item& joint )
{
	if( Random( 0, 2 ) == 0 )
	{
		_SubItem( joint, 1 );
	}
	WeedEffect( cr );
}

void SmokePipe( Critter& cr, Item& smokingPipe )
{
	if( smokingPipe.REMAINING_USES <= 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PIPE_EMPTY );
		return;
	}
	
	if( smokingPipe.PIPE_CHARGE == CHARGE_TOBACCO )
	{	
		TobaccoEffect( cr );
	}
	else 
	{
		WeedEffect( cr );
	}
	
	smokingPipe.REMAINING_USES--;
	smokingPipe.Update();
	if( smokingPipe.REMAINING_USES == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PIPE_BURNED );
		return;
	}
}

void SmokeCigar( Critter& cr, Item& cigar )
{
	uint16 Pid = cigar.GetProtoId();
	if( Pid == PID_PREWAR_CIGAR1 || Pid == PID_PREWAR_CIGAR2 )
	{
		cr.MoveItem( cigar.Id, cigar.GetCount(), SLOT_INV );
		_SubItem( cigar, 1 );
		Item@ okurok = cr.AddItem( ( Pid == PID_PREWAR_CIGAR1 ? PID_PREWAR_CIGAR1_PRT : PID_PREWAR_CIGAR2_PRT ), 1 );
			
		if( valid( okurok ) )
		{
			cr.MoveItem( okurok.Id, okurok.GetCount(), SLOT_HAND1 );
		}
	}
	else
	{
		cigar.REMAINING_USES--;
		string hash = "art\\inven\\misc\\cigar\\cigar_st2_inv.png";
		switch( cigar.REMAINING_USES )
		{
			case( 7 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st3_inv.png";
				break;
			case( 6 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st4_inv.png";
				break;
			case( 5 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st5_inv.png";
				break;
			case( 4 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st6_inv.png";
				break;
			case( 3 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st7_inv.png";
				break;							
			case( 2 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st8_inv.png";
				break;
			case( 1 ):
				hash = "art\\inven\\misc\\cigar\\cigar_st9_inv.png";
				break;
		}
		
		cigar.PicInv = GetStrHash( hash );
		cigar.Update();
		
		if( cigar.Val0 < 1 )
		{
			_SubItem( cigar, 1 );
		}
	}
	TobaccoEffect( cr );
}

void SmokeCig( Critter& cr, Item& cigarette )
{
	uint16 Pid = cigarette.GetProtoId();
	if( Pid == PID_CIGARETTE )
	{
		cr.MoveItem( cigarette.Id, cigarette.GetCount(), SLOT_INV );
		_SubItem( cigarette, 1 );
		Item@ sig_butt = cr.AddItem( ( Pid == PID_CIGARETTE ? PID_CIGARETTE_IGN : PID_CIGARETTE_IGN ), 1 );
			
		if( valid( sig_butt ) )
		{
			cr.MoveItem( sig_butt.Id, sig_butt.GetCount(), SLOT_HAND1 );
		}
	}
	else
	{
		cigarette.REMAINING_USES--;
		string hash = "art\\inven\\misc\\cig\\Zigarette4_inv.png";
		switch( cigarette.REMAINING_USES )
		{			
			case( 4 ):
				hash = "art\\inven\\misc\\cig\\Zigarette4_inv.png";
				break;
			case( 3 ):
				hash = "art\\inven\\misc\\cig\\Zigarette3_inv.png";
				break;							
			case( 2 ):
				hash = "art\\inven\\misc\\cig\\Zigarette2_inv.png";
				break;
			case( 1 ):
				hash = "art\\inven\\misc\\cig\\Zigarette1_inv.png";
				break;
		}
		
		cigarette.PicInv = GetStrHash( hash );
		cigarette.Update();
		if( cigarette.Val0 < 1 )
		{
			_SubItem( cigarette, 1 );
		}
	}
	TobaccoEffect( cr );
}

void ChargePipe( Critter& cr, Item& item )
{
	if( hasItems( cr, SmokingPipes, SLOT_HAND1 ) )
	{
		Item@ smokingPipe = _CritGetItemHand( cr );
		if( valid( smokingPipe ) ) 
		{
			item.REMAINING_USES--;
			smokingPipe.REMAINING_USES = 5;
			if( item.GetProtoId() == PID_FIVELEAF_BAG )
			{
				SayLog( cr, crInfo( cr ) + " charged smoking pipe with fiveleaf" );
				smokingPipe.PIPE_CHARGE = CHARGE_WEED;
			}
			else 
			{
				SayLog( cr, crInfo( cr ) + " charged smoking pipe with tobacco" );
				smokingPipe.PIPE_CHARGE = CHARGE_TOBACCO;
			}
			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "ROBE.mp3", 6 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PIPE_REFILLED );
			item.Update();
			smokingPipe.Update();
			
			if( item.REMAINING_USES <= 0 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_BAG_EMPTY );
				_SubItem( item, 1 );
				cr.AddItem( PID_BAG, 1 );
			}
		}
	}
	else
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_PIPE );
	}
}

void TobaccoEffect( Critter& cr )
{
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TASTE_TOBACCO );
	cr.StatBase[ ST_DYSPNEA ] -= Random( 1, 50 );
	cr.StatBase[ ST_HUNGER ] -= Random( 0, 1 ) * 10;
	cr.StatBase[ ST_THIRST ] -= Random( 0, 1 ) * 10;
	int time = cr.Timeout[ TO_TIREDNESS ];
	
	if( time > 0 )
	{
		time = CLAMP( time - REAL_SECOND( Random( 15, 30 ) ), 0, time );
		cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + time;
	}
}

void WeedEffect( Critter& cr )
{
    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TASTE_WEED );
	cr.StatBase[ ST_EXPERIENCE ] += 10 * Random( 1, 5 );
	AffectPoison( cr, Random( 2, 10 ) );
	cr.StatBase[ ST_HUNGER ] -= Random( 20, 40 );
	cr.StatBase[ ST_THIRST ] -= Random( 20, 40 );
    cr.StatBase[ ST_DYSPNEA ] -= Random( 10, 100 );

	int time = cr.Timeout[ TO_TIREDNESS ];
	if( time > 0 )
	{
		time = CLAMP( time - REAL_SECOND( Random( 60, 120 ) ), 0, time );
		cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + time;
	}
}
#endif // SMOKING