#ifndef CARAVAN
#define CARAVAN

#include "_utils.fos"
#include "_ai.fos"
#include "caravan_h.fos"
#include "gm_h.fos"
#include "entire_h.fos"
#include "local_population_h.fos"

#include "npc_names_holder_h.fos"
#include "globalmap_group_h.fos"
#include "npc_planes_h.fos"
#include "Fractions.fosh"
#include "critter_status_h.fos"
#include "_npc_pids.fos"


import bool TransitToLoc(Critter&cr,uint16 locPid,uint mapIndex,uint entranceNum)from"stdlib";
import void AddNpc( Critter& critter, int x, int y, int pid ) from "factions";
import void GM_GuardsInit( Critter& npc ) from "ai_guards";
import void GM_MobInit( Critter& npc ) from "mob";
import void _MobInit( Critter& npc, bool firstTime ) from "mob";

void CaravanFollow( Critter& targetCr, Map& map, uint16 x, uint16 y, int radius, int way_dir, uint16 way )
{		
	Critter@[] crs;
	x = targetCr.HexX;
	y = targetCr.HexY;
	uint count = map.GetCrittersHex( x, y, radius, FIND_ALL | FIND_ONLY_PLAYERS, crs );
	for( uint i = 0; i < count; i++ )
	{		
		crs[i].StatBase[ CR_CARAVAN_DIST_ID ] = way;
		crs[i].StatBase[ CR_CARAVAN_DIRECTION ] = way_dir;
		crs[i].ShowScreen( SCREEN_DIALOGBOX, 1, "dlg_caravan" );
		crs[i].SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, STR_CARAVAN_OFFER );
		crs[i].SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_TEXT, STR_DLG_AGREE );	
	}
}

void dlg_caravan( Critter& caravan_Cr, uint answerI, string& answerS )
{	
	if( answerI == 0 )	{			
		
		Map @ map = caravan_Cr.GetMap();				
		map.SetTextMsg( caravan_Cr.HexX, caravan_Cr.HexY, COLOR_ENV, TEXTMSG_TEXT, STR_CARAVAN_START );
		uint16 LocPid = caravan_Cr.StatBase[ CR_CARAVAN_DIST_ID ];	
		int w_dir = caravan_Cr.StatBase[ CR_CARAVAN_DIRECTION ];		
		if (caravan_Cr.StatBase[ CR_CARAVAN_DIRECTION ] == 0) TransitToLoc( caravan_Cr, (caravan_Cr.StatBase[ CR_CARAVAN_DIST_ID ]), 0, 227 );
		else TransitToLoc( caravan_Cr, (caravan_Cr.StatBase[ CR_CARAVAN_DIST_ID ]+6), 0, 227 );
		enc_loc_swich(caravan_Cr, LocPid, 0, 0 );		
	}
	return; 
}

void enc_loc_swich( Critter& caravan_Cr, uint16 LocP, int MapIndex, int skipCount )
{				
		uint16 MapPid;
		for( int i_st = 1, i_end = 3; i_st <= i_end; i_st++)
		{
			switch( i_st )
			{
				case( 1 ):					
					MapPid = LocP+10; //83last_loc - motel
					break;
				case( 2 ): 
					MapPid = LocP+5; //77mid_loc - crossroad
					break;
				case( 3 ): 
					MapPid = LocP+2; //74first_loc - canyon
					break;				
			}		 
			Location@ loc = GetLocationByPid( MapPid, skipCount );
			Map@ map_enc = loc.GetMapByIndex( MapIndex );			
			enc_loc_population (map_enc, Random( 1, 4 ), Random( caravan_Cr.ParamBase[ ST_LUCK ], 11 ) );						
		}
}		
void enc_loc_population(Map& map_enc, int type, int rare)
{
	int pid;
	int population;
	switch( type )
			{				
				case( 4 ): //human					
					if ( rare >=9 )
					{						
						population = Random( 3, 7 );
					}
					else
					{
						population = Random( 0, 3 );
					}
					break;
				case( 3 ): // ghoul
					population = Random( 2, 5 );
					break;							
				case( 2 ): // mutant
					population = Random( 0, 3 );
					break;
				case( 1 ): // animal
					population = Random( 3, 8 );
					break;
			}	
	int aggressive;
	for( int ii = 0, iiend = population; ii < iiend; ii++)
		{				
			switch( type )
			{				
				case( 4 ): //human					
					if ( rare >=9 )
					{
						pid = Random(1780, 1780);
						aggressive = 0;
					}
					else
					{
						aggressive = Random( 0, 1 );
						pid = Random(1720, 1725);
					}
					break;
				case( 3 ): // ghoul
					aggressive = Random( 0, 1 );
					pid = Random(1840, 1845);
					break;							
				case( 2 ): // mutant
					pid = Random(1870, 1875);
					break;
				case( 1 ): // animal
					aggressive = Random( 0, 1 );
					pid = Random(1060, 1062);
					break;
			}	
			
			int entires = map_enc.CountEntire( CARAVAN_ENC_SPAWN );
			if( entires > 0 )		
			{
				uint16 hx = 0, hy = 0;			
				map_enc.GetEntireCoords( CARAVAN_ENC_SPAWN, Random( 0, entires - 1 ), hx, hy );
				uint16 pos_x = hx-(2*Random( 1, 5 ));
				uint16 pos_y = hy-(1*Random( -10, -5 ));
			
			Critter@ cr= map_enc.AddNpc( Random(2454, 2473), pos_x, pos_y, Random( 0, 5 ), null, null, "ai_guards@_AiGuardsInit" );
		//	Critter@ cr= map_enc.AddNpc( pid, pos_x, pos_y, Random( 0, 5 ), null, null, "ai_guards@_AiGuardsInit" );
			
			if( valid( cr ) )
			{			
				switch( type )
				{				
					case( 4 ): //human
						if (rare >=9)
						{
							cr.ParamBase[ ST_FACTION ] = GetStrHash( "enc_carav" );
							cr.ParamBase[ CR_IS_AGGRESSIVE ] = 0;
							cr.StatBase[ ST_TEAM_ID ] = 200+type;
						}
						else 
						{
							cr.ParamBase[ ST_FACTION ] = GetStrHash( "enc_raiders" );
							cr.ParamBase[ CR_IS_AGGRESSIVE ] = aggressive;
							cr.StatBase[ ST_TEAM_ID ] = 100+type;
						}
						break;						
					case( 3 ): // ghoul
						cr.ParamBase[ ST_FACTION ] = GetStrHash( "enc_ghouls" );
						cr.ParamBase[ CR_IS_AGGRESSIVE ] = aggressive;
						cr.StatBase[ ST_TEAM_ID ] = 100+type;
						break;							
					case( 2 ): // mutant
						cr.ParamBase[ ST_FACTION ] = GetStrHash( "enc_muts" );
						cr.ParamBase[ CR_IS_AGGRESSIVE ] = aggressive;
						cr.StatBase[ ST_TEAM_ID ] = 100+type;
						break;
					case( 1 ): // animal
						cr.ParamBase[ ST_FACTION ] = GetStrHash( "enc_creeps" );
						cr.ParamBase[ CR_IS_AGGRESSIVE ] = aggressive;
						cr.StatBase[ ST_TEAM_ID ] = 100+type+aggressive;
						break;
				}	
				
				int bonus_hp = 10 * Random( 0, 5 );				
		
				cr.StatBase[ ST_AI_ID ] = 207;
				cr.ParamBase[ MERC_TYPE ] = 10;        
				cr.ModeBase[ MODE_NO_HOME ] = 0;
			//	cr.ModeBase[ MODE_NO_LOOT ] = 1;
				cr.ModeBase[ MODE_NO_STEAL ] = 1;
				cr.ModeBase[ MODE_UNLIMITED_AMMO ] = 1;

				cr.ParamBase[ ST_MAX_LIFE ] = cr.ParamBase[ ST_MAX_LIFE ] + bonus_hp;
				cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
			//	GM_MobInit( cr );						
				GM_GuardsInit( cr );
				
			}
			}
		}			
	
}
	

#endif // caravan